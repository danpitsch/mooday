generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider     = "mysql"
  provider = "sqlite"
  url          = env("DATABASE_URL")
  // relationMode = "prisma"
}

model User {
  id        String         @id @default(uuid())
  email     String         @unique
  clerkId   String         @unique
  name      String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  account   Account?
  entries   JournalEntry[]
  analysis  EntryAnalysis[]
}

model Account {
  id               String @id @default(uuid())
  userId           String
  user             User   @relation(fields: [userId], references: [id])
  // stripeCustomerId String @unique

  @@unique([userId])
}

// enum JOURNAL_ENTRY_STATUS {
//   DRAFT
//   PUBLISHED
//   ARCHIVED
// }

model JournalEntryStatus {
  id     Int            @id @default(autoincrement())
  status String         @unique
  // entry  JournalEntry[]
}

model JournalEntry {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content  String
  statusId Int
  // status   JournalEntryStatus @relation(fields: [statusId], references: [id])
  analysis EntryAnalysis?

  @@unique([userId, id])
}

model EntryAnalysis {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entryId String
  entry   JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // mood String @db.Text
  mood           String
  // subject String @db.Text
  subject        String
  negative       Boolean
  // summary String @db.Text
  summary        String
  // color String @db.Text @default("#0101fe")
  color          String  @default("#0101fe")
  sentimentScore Float

  @@unique([entryId])
  @@index([userId])
}
